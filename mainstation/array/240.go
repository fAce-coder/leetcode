package array

func searchMatrix(matrix [][]int, target int) bool {
	/*
		因为矩阵每行元素从左到右升序排序，每列元素从上到下降序排序，因此每个数下方的数字一定比当前数字大，每个数左侧的数字一定比当前数字小
		上述发现让我们联想到二叉搜索树，二叉搜索树的特性就是：某个节点的左孩子一定比当前节点小，右孩子一定比当前节点大
		我们找到最右最上的那个节点，发现其满足二叉搜索树根节点的特性，且如果将矩阵逆时针旋转45度，则此时矩阵类似于二叉搜索树
		因此要找到目标值，只需以矩阵右上角（类二叉搜索树的根节点）为起点：
			如果目标值<当前值，则往当前值的左侧（类二叉搜索树的左孩子）寻找
			如果目标值>当前值，则往当前值的下方（类二叉搜索树的右孩子）寻找
			如果目标值=当前值，说明找到目标数，返回true
	*/

	// 1.初始化属性
	// 矩阵的行列
	m := len(matrix)
	n := len(matrix[0])
	// 查找起点横纵坐标（矩阵右上角）
	i := 0
	j := n - 1

	// 2.以矩阵右上角（类二叉搜索树的根节点）为起点，进行查找
	for {
		if i > m-1 || j < 0 {
			// 2.1 如果索引越界了还没找到，则说明矩阵中不存在目标值，返回false
			return false
		}
		if target < matrix[i][j] {
			// 2.2 如果目标值<当前值，则往当前值的左侧（类二叉搜索树的左孩子）寻找
			j--
		} else if target > matrix[i][j] {
			// 2.3 如果目标值>当前值，则往当前值的下方（类二叉搜索树的右孩子）寻找
			i++
		} else {
			// 2.4 如果目标值=当前值，说明找到目标数，返回true
			return true
		}
	}
}
