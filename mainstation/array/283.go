package array

func moveZeroes(nums []int) {
	// 快慢双指针

	/*
		涉及到不复制数组的情况，且对数组进行原地操作，此时考虑双指针
		快慢双指针，慢指针负责存储交换后的非0元素，快指针负责找非0元素
		快指针一直向右移动，找到第一个非0元素，与慢指针索引所在的值进行交换，并将慢索引也向前移动一位，来交换下一个数
		为了防止慢指针将非0数据交换，初始时将快慢指针都放到索引0处
	*/

	// 1.初始化快慢指针索引都为0
	// 慢指针负责存储交换后的非0元素，快指针负责找非0元素
	slow := 0
	fast := 0

	// 2.移动快慢指针交换数据
	// 因为快指针的功能是寻找非0元素，因此快指针越界则说明后面没有非0元素了，此时跳出循环，返回结果
	for fast <= len(nums)-1 {
		// 2.1 判断快指针处元素是否非零，如果非零：
		if nums[fast] != 0 {
			// 2.1.1 将快慢指针索引位置的数字互换
			nums[slow], nums[fast] = nums[fast], nums[slow]
			// 2.1.2 将慢索引向前移动一位，来交换下一个数
			slow++
		}
		// 2.2 不管快指针是否找到非零元素，快指针都向后移动一位，来寻找下一个非零元素
		fast++
	}
}
