package array

func maxProfit4(prices []int, fee int) int {
	// 动态规划

	/*
		本题要求整个周期中买卖股票所能获得的最大利润；即从周期第0天开始，到周期最后一天为止，多次买卖股票所能得到的最大利润
		因此将求整个周期最大利润这一大问题，拆分成从第0天开始，到周期中的某一天为止，买卖多次股票所能得到的最大利润这些子问题；因此考虑动态规划
		1.状态（子问题）：
			从第0天开始，到第i天为止所能获得的最大利润，而第i天可能有两种状态：要么持有股票，要么不持有股票
			状态数组dp0[i]表示从第0天开始，到第i天为止，且第i天不持有股票所能得到的最大利润
			状态数组dp1[i]表示从第0天开始，到第i天为止，且第i天持有股票所能得到的最大利润
		2.起始状态：
			第0天不持有股票时，说明第0天没有买入股票，或者买入后直接卖出了，因此第0天的利润一定是0，即dp0[0]=0
			第0天持有股票时，说明第0天买入了股票，因此第0天的利润是负的买入股票所花的钱，即dp1[0]=-prices[0]
		3.状态转移：
			统一将手续费在卖出时扣除
			3.1 当第i天不持有股票：
				如果第i-1天还持有，是在第i天当天卖出的，则第i天为止的利润=第i-1天为止的利润+第i天卖出股票所赚的钱-手续费，即dp0[i]=dp1[i-1]+prices[i]-fee
				如果第i-1天已经不持有了，在第i天也没有买入，则第i天为止的利润=第i-1天为止的利润，即dp0[i]=dp0[i-1]
				第i天不持有股票的最大利润是上述两种情况的较大值
			3.2 当第i天持有股票：
				如果第i-1天不持有，是在第i天买入的，则第i天为止的利润=第i-1天为止的利润-第i天买入股票所花的钱，即dp1[i]=dp0[i-1]-prices[i]
				如果第i-1天已经持有了，在第i天也没有卖出，则第i天为止的利润=第i-1天为止的利润，即dp1[i]=dp1[i-1]
				第i天持有股票的最大利润是上述两种情况的较大值
			因为要想利益最大，最后一天一定要将股票全部卖出，即最后一天一定不会持有股票，因此dp0[n-1]就是整个周期中买卖多次股票所能得到的最大利润
	*/

	// 1.状态数组：
	// 从第0天开始，到第i天为止所能获得的最大利润，而第i天可能有两种状态：要么持有股票，要么不持有股票
	n := len(prices)
	dp0 := make([]int, n) // 状态数组dp0[i]表示从第0天开始，到第i天为止，且第i天不持有股票所能得到的最大利润
	dp1 := make([]int, n) // 状态数组dp1[i]表示从第0天开始，到第i天为止，且第i天持有股票所能得到的最大利润

	// 2.起始状态
	dp0[0] = 0          // 第0天不持有股票时，说明第0天没有买入股票，或者买入后直接卖出了，因此第0天的利润一定是0，即dp0[0]=0
	dp1[0] = -prices[0] // 第0天持有股票时，说明第0天买入了股票，因此第0天的利润是负的买入股票所花的钱，即dp1[0]=-prices[0]

	// 3.状态转移
	// 统一将手续费在卖出时扣除
	for i := 1; i < n; i++ {
		// 3.1 当第i天不持有股票：
		// 如果第i-1天还持有，是在第i天当天卖出的，则第i天为止的利润=第i-1天为止的利润+第i天卖出股票所赚的钱-手续费，即dp0[i]=dp1[i-1]+prices[i]-fee
		// 如果第i-1天已经不持有了，在第i天也没有买入，则第i天为止的利润=第i-1天为止的利润，即dp0[i]=dp0[i-1]
		// 第i天不持有股票的最大利润是上述两种情况的较大值
		dp0[i] = maxInt(dp1[i-1]+prices[i]-fee, dp0[i-1])
		// 3.2 当第i天持有股票：
		// 如果第i-1天不持有，是在第i天买入的，则第i天为止的利润=第i-1天为止的利润-第i天买入股票所花的钱，即dp1[i]=dp0[i-1]-prices[i]
		// 如果第i-1天已经持有了，在第i天也没有卖出，则第i天为止的利润=第i-1天为止的利润，即dp1[i]=dp1[i-1]
		// 第i天持有股票的最大利润是上述两种情况的较大值
		dp1[i] = maxInt(dp0[i-1]-prices[i], dp1[i-1])
	}

	// 4.因为要想利益最大，最后一天一定要将股票全部卖出，即最后一天一定不会持有股票，因此dp0[n-1]就是整个周期中买卖多次股票所能得到的最大利润
	return dp0[n-1]
}
