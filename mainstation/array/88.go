package array

func merge(nums1 []int, m int, nums2 []int, n int) {
	// 逆序双指针

	/*
		该题要求不返回任何值，直接存储在nums1中，因此不使用辅助数组
		因为nums1中后面有n个为0的空闲位置，且nums1和nums2都是有序的，因此考虑先填充这些位置，即逆序比较大小，来防止正序比较导致的数据填充乱序问题
		填充位从nums1的最后一位索引开始，依次向前移动一位进行填充
		而比较位则分别放在nums1和nums2中数据存在的实际位置的最后，即各自的最大值，依次向前移动一位进行比较
	*/

	// 1.初始化两数组中比较位的索引，即各自的最大值所在的索引
	i := m - 1
	j := n - 1

	// 2.填充位从nums1的最后一位索引开始，依次向前移动一位进行填充
	for k := m + n - 1; k >= 0; k-- {
		// 判断两数组中比较位是否越界
		if i >= 0 && j >= 0 {
			// 2.1 都没越界，则比较两数组中当前位的大小，将大的放到填充位，并将大的数组比较位前移一位
			if nums1[i] >= nums2[j] {
				nums1[k] = nums1[i]
				i--
			} else {
				nums1[k] = nums2[j]
				j--
			}
		} else if i >= 0 && j < 0 {
			// 2.2 数组2越界了，说明数组2中没有数据了，此时将数组1中的比较位的值放到填充位，数组1比较位前移一位
			nums1[k] = nums1[i]
			i--
		} else if i < 0 && j >= 0 {
			// 2.3 数组1越界了，说明数组1中没有数据了，此时将数组2中的比较位的值放到填充位，数组2比较位前移一位
			nums1[k] = nums2[j]
			j--
		}
	}
}
