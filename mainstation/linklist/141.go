package linklist

func hasCycle(head *ListNode) bool {
	// 快慢双指针（龟兔赛跑）

	/*
		在链表的首元结点，设置快慢两个指针，慢指针一次走1步，快指针一次走2步
		如果链表无环：则链表的最后一定是nil；由于快指针走的比慢指针快，所以如果快指针遇到nil，则说明链表无环
		如果链表有环：则快慢指针先分别走过了无环的一段，然后先后进入环，并在环内转圈；由于快指针走的比慢指针快，则如果链表有环，快指针在套了慢指针n圈后，快慢指针一定会相遇在某一点
	*/

	// 1.特殊情况：链表中没有节点或只有一个节点，则必定不会有环
	if head == nil || head.Next == nil {
		return false
	}

	// 2.将快慢指针放置在链表的首元结点
	slow := head
	fast := head

	// 3.快慢指针开始移动判圈
	for {
		// 3.1 如果链表无环：则链表的最后一定是nil；由于快指针走的比慢指针快，所以如果快指针遇到nil，则说明链表无环
		if fast.Next == nil || fast.Next.Next == nil {
			return false
		}
		// 3.2 快指针没有遇到nil，则快慢指针同时移动
		slow = slow.Next      // 慢指针一次走1步
		fast = fast.Next.Next // 快指针一次走2步
		// 3.3 如果链表有环：则快慢指针先分别走过了无环的一段，然后先后进入环，并在环内转圈；由于快指针走的比慢指针快，则如果链表有环，快指针在套了慢指针n圈后，快慢指针一定会相遇在某一点
		if slow == fast {
			return true
		}
	}
}
